/* Generated By:JJTree&JavaCC: Do not edit this line. XQueryParser.java */
    package XQuery;
    public class XQueryParser/*@bgen(jjtree)*/implements XQueryParserTreeConstants, XQueryParserConstants {/*@bgen(jjtree)*/
  protected JJTXQueryParserState jjtree = new JJTXQueryParserState();

  final public AST_Root query() throws ParseException {
                                     /*@bgen(jjtree) Root */
  AST_Root jjtn000 = new AST_Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      xQuery();
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void absolutePath() throws ParseException {
 /*@bgen(jjtree) AP */
    AST_AP jjtn000 = new AST_AP(this, JJTAP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DOC);
      jj_consume_token(1);
      filename();
      jj_consume_token(2);
      if (jj_2_1(2)) {
        jj_consume_token(DOUBLESLASH);
        relativePath();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SINGLELASH:
          jj_consume_token(SINGLELASH);
          relativePath();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void pathFilter() throws ParseException {
                                    /*@bgen(jjtree) PF */
  AST_PF jjtn000 = new AST_PF(this, JJTPF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(5)) {
        relativePath();
        if (jj_2_2(2)) {
          jj_consume_token(EQ);
          relativePath();
          pathFilter2();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IS:
            jj_consume_token(IS);
            relativePath();
            pathFilter2();
            break;
          default:
            jj_la1[1] = jj_gen;
            pathFilter2();
          }
        }
      } else if (jj_2_4(5)) {
        jj_consume_token(3);
        pathFilter();
        jj_consume_token(4);
        pathFilter2();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          pathFilter();
          pathFilter2();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void pathFilter2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      pathFilter();
      pathFilter2();
      break;
    case OR:
      jj_consume_token(OR);
      pathFilter();
      pathFilter2();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void relativePath() throws ParseException {
 /*@bgen(jjtree) RP */
    AST_RP jjtn000 = new AST_RP(this, JJTRP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAGNAME:
        tagname();
        relativePath2();
        break;
      case STAR:
        jj_consume_token(STAR);
        relativePath2();
        break;
      default:
        jj_la1[4] = jj_gen;
        if (jj_2_5(2)) {
          jj_consume_token(DOT);
          relativePath2();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOUBLEDOT:
            jj_consume_token(DOUBLEDOT);
            relativePath2();
            break;
          case TXT:
            jj_consume_token(TXT);
            relativePath2();
            break;
          case 3:
            jj_consume_token(3);
            relativePath();
            jj_consume_token(4);
            relativePath2();
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void relativePath2() throws ParseException {
    if (jj_2_6(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLELASH:
        jj_consume_token(SINGLELASH);
        relativePath();
        relativePath2();
        break;
      case DOUBLESLASH:
        jj_consume_token(DOUBLESLASH);
        relativePath();
        relativePath2();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
        jj_consume_token(5);
        pathFilter();
        jj_consume_token(6);
        relativePath2();
        break;
      default:
        jj_la1[7] = jj_gen;
        if (jj_2_7(3)) {
          jj_consume_token(7);
          relativePath();
        } else {

        }
      }
    }
  }

  final public void xQuery() throws ParseException {
 /*@bgen(jjtree) XQ */
    AST_XQ jjtn000 = new AST_XQ(this, JJTXQ);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOC:
        absolutePath();
        xQuery2();
        break;
      case 3:
        jj_consume_token(3);
        xQuery();
        jj_consume_token(4);
        xQuery2();
        break;
      case 8:
        jj_consume_token(8);
        tagname();
        jj_consume_token(9);
        jj_consume_token(10);
        xQuery();
        jj_consume_token(11);
        jj_consume_token(12);
        tagname();
        jj_consume_token(9);
        xQuery2();
        break;
      case FOR:
        forClause();
        letClauseWithEmpty();
        whereClause();
        returnClause();
        xQuery2();
        break;
      case LET:
        letClause();
        xQuery();
        break;
      case VAR:
        var();
        xQuery2();
        break;
      case STRING:
        string();
        xQuery2();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void xQuery2() throws ParseException {
    if (jj_2_8(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLELASH:
        jj_consume_token(SINGLELASH);
        relativePath();
        break;
      case DOUBLESLASH:
        jj_consume_token(DOUBLESLASH);
        relativePath();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      xQuery2();
    } else if (jj_2_9(2147483647)) {

    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        xQuery();
        xQuery2();
        break;
      default:
        jj_la1[10] = jj_gen;

      }
    }
  }

  final public void forClause() throws ParseException {
                                     /*@bgen(jjtree) FORCLAUSE */
  AST_FORCLAUSE jjtn000 = new AST_FORCLAUSE(this, JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      var();
      jj_consume_token(IN);
      xQuery();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_1;
        }
        jj_consume_token(7);
        var();
        jj_consume_token(IN);
        xQuery();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void letClause() throws ParseException {
                                         /*@bgen(jjtree) #LETCLAUSE(> 1) */
  AST_LETCLAUSE jjtn000 = new AST_LETCLAUSE(this, JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LET);
      var();
      jj_consume_token(ASSIGN);
      xQuery();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_2;
        }
        jj_consume_token(7);
        var();
        jj_consume_token(ASSIGN);
        xQuery();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void letClauseWithEmpty() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      letClause();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  final public void whereClause() throws ParseException {
                                             /*@bgen(jjtree) #WHERECLAUSE(> 1) */
  AST_WHERECLAUSE jjtn000 = new AST_WHERECLAUSE(this, JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        cond();
        break;
      default:
        jj_la1[14] = jj_gen;
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtc000 = false;

      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void returnClause() throws ParseException {
                                             /*@bgen(jjtree) #RETURNCLAUSE(> 1) */
  AST_RETURNCLAUSE jjtn000 = new AST_RETURNCLAUSE(this, JJTRETURNCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      xQuery();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void cond() throws ParseException {
                                     /*@bgen(jjtree) COND */
  AST_COND jjtn000 = new AST_COND(this, JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMPTY:
        jj_consume_token(EMPTY);
        jj_consume_token(3);
        xQuery();
        jj_consume_token(4);
        cond2();
        break;
      case SOME:
        jj_consume_token(SOME);
        var();
        jj_consume_token(IN);
        xQuery();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 7:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_3;
          }
          jj_consume_token(7);
          var();
          jj_consume_token(IN);
          xQuery();
        }
        jj_consume_token(SATISFIES);
        cond();
        cond2();
        break;
      case 3:
      case 8:
      case LET:
      case DOC:
      case FOR:
      case STRING:
      case VAR:
        xQuery();
        if (jj_2_10(2)) {
          jj_consume_token(IS);
          xQuery();
          cond2();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQ:
            jj_consume_token(EQ);
            xQuery();
            cond2();
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void cond2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      cond();
      cond2();
      break;
    case OR:
      jj_consume_token(OR);
      cond();
      cond2();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  final public void filename() throws ParseException {
 /*@bgen(jjtree) FILENAME */
 AST_FILENAME jjtn000 = new AST_FILENAME(this, JJTFILENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FILENAME);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setToken(t.kind,t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void var() throws ParseException {
 /*@bgen(jjtree) VAR */
 AST_VAR jjtn000 = new AST_VAR(this, JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.setToken(t.kind,t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String string() throws ParseException {
 /*@bgen(jjtree) STRING */
 AST_STRING jjtn000 = new AST_STRING(this, JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setToken(t.kind,t.image);{if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token tagname() throws ParseException {
 /*@bgen(jjtree) TAGNAME */
 AST_TAGNAME jjtn000 = new AST_TAGNAME(this, JJTTAGNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TAGNAME);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.setToken(t.kind,t.image);{if (true) return t;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_34() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(3)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(DOUBLESLASH)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(5)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(6)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(SINGLELASH)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(4)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(TXT)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(DOUBLEDOT)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(TAGNAME)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_35()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(IS)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(4)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(DOUBLESLASH)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(IS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOUBLESLASH)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(DOC)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SINGLELASH)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(LET)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public XQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x2000000,0x80000000,0x60000000,0x0,0x80008,0x0,0x20,0x260108,0x0,0x80,0x80,0x80,0x20000,0x400000,0x80,0x1000000,0xc260108,0x60000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x0,0x0,0x0,0x202,0x8,0x30,0x0,0x180,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public XQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XQueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public XQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public XQueryParser(XQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(XQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                               }
