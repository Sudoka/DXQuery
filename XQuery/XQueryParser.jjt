options {
    MULTI=true;
    NODE_DEFAULT_VOID=false;
    VISITOR=true;
    STATIC=false;
    NODE_PREFIX="AST_";
    NODE_USES_PARSER=true;
}


PARSER_BEGIN( XQueryParser)
    package XQuery;
    public class XQueryParser {}
PARSER_END( XQueryParser)

    AST_Root query()  #Root       : {}  
{
    ( xQuery() ) { return jjtThis; } 
} 

void absolutePath() #AP         : 
{
    Token t;
}
{  <DOC>"(\"" filename() "\")" 
    (LOOKAHEAD(2)<DOUBLESLASH> relativePath() 
     | <SINGLELASH> relativePath()
    )
}

void pathFilter()   #PF          : {}
{  LOOKAHEAD(5)(relativePath() 
        (    LOOKAHEAD(2) <EQ> relativePath() pathFilter2()
             | <IS> relativePath() pathFilter2()
             |pathFilter2()
        )
        )
    | LOOKAHEAD(5)"(" pathFilter() ")" pathFilter2()
    | <NOT> pathFilter() pathFilter2()
}

void pathFilter2()  #void   : {}
{  <AND> pathFilter()pathFilter2()
    | <OR> pathFilter()pathFilter2()
        | {}
}


void relativePath() #RP         : 
{
    Token t;
}    
{  tagname() relativePath2()
    | <STAR> relativePath2()
        | LOOKAHEAD(2) <DOT> relativePath2()
        | <DOUBLEDOT> relativePath2()
        | <TXT> relativePath2()
        |  "(" relativePath() ")" relativePath2() 
}

void relativePath2() #void  : {}
{ LOOKAHEAD(2) (
        <SINGLELASH> relativePath() relativePath2()
        | <DOUBLESLASH> relativePath() relativePath2()
        )
    | "[" pathFilter() "]" relativePath2()
    | LOOKAHEAD(3) "," relativePath() 
    | {}
}

void xQuery()       #XQ     :   
{
    Token t;
}
{   
    //TODO:how to ensure that the tags match?!
    absolutePath() xQuery2()
        | "(" xQuery() ")" xQuery2()
        | "<" tagname() ">" "{"   xQuery()  "}" "</" tagname() ">" xQuery2()
        | forClause() letClauseWithEmpty() whereClause() returnClause() xQuery2()
        | letClause() xQuery()
        | var() xQuery2()
        | string() xQuery2()
}

void xQuery2()      #void   :   {}
{   LOOKAHEAD(2)  ( <SINGLELASH> relativePath() | <DOUBLESLASH> relativePath() ) xQuery2()
    | LOOKAHEAD((","<VAR><ASSIGN>) | (","<VAR><IN>)) {}
    | "," xQuery() xQuery2()
        | {}
}

void forClause()    #FORCLAUSE  :   {}
{   <FOR> var() <IN> xQuery() ( "," var() <IN> xQuery() )*
}

void letClause()    #LETCLAUSE(>1)  :   {}
{   <LET>  var() <ASSIGN> xQuery() ( "," var() <ASSIGN> xQuery() )*
}

void letClauseWithEmpty()     #void    :   {}
{ letClause() | {}
}

void whereClause()  #WHERECLAUSE(>1)    :   {}
{   <WHERE> cond() 
    | {}
}

void returnClause() #RETURNCLAUSE(>1)   :   {}
{   <RETURN> xQuery()
}

void cond()         #COND       :   {}
{ <EMPTY>"(" xQuery() ")" cond2()
    | ( <SOME> var() <IN> xQuery() 
            ( "," var() <IN> xQuery() )* <SATISFIES> cond() cond2()
      )
        |
        ( xQuery() 
          ( LOOKAHEAD(2) <IS> xQuery() cond2() 
            | <EQ> xQuery() cond2() 
          )
        )
}

void cond2()    #void   :   {}
{   <AND> cond() cond2()
    | <OR> cond() cond2()
        |{}
}

void filename()     #FILENAME   :   
{Token t;}
{
    t=<FILENAME>{jjtThis.setToken(t.kind,t.image);}
}

void var()  #VAR    : 
{Token t;}
{
    t=<VAR>{jjtThis.setToken(t.kind,t.image);}
}

String string()   #STRING     :
{Token t;}
{
    t=<STRING>{jjtThis.setToken(t.kind,t.image);return t.image;}
}

Token tagname()  #TAGNAME    :
{Token t;}
{
    t=<TAGNAME>{jjtThis.setToken(t.kind,t.image);return t;}
}

SKIP  : { " " | "\t" | "\n" | "\r" }


/* Reserved words */
TOKEN [IGNORE_CASE]: {
    < LET: "let">
        | < DOC: "doc"|"document" >
        | < TXT: "text()" >
        | < IN: "in" >
        | < FOR: "for" >
        | < WHERE: "where" >
        | < RETURN: "return" >
        | < EQ: "eq"|"=" >
        | < IS: "is"|"==" >
        | < EMPTY: "empty" >
        | < SOME: "some" >
        | < SATISFIES: "satisfies" >
        | < AND: "and" >
        | < OR: "or" >
        | < NOT: "not" >
}

/* symbols */
TOKEN: {
           //< SINGLEEQ: "=" >
           //| < DOUBLEEQ: "==" >
           < ASSIGN: ":=" >
               |< STAR: "*" >
               //| < COMMA:"," >
               | < DOT: "." >
               | < DOUBLEDOT: ".." >
               //| < SEMI:";" >
               //| < AT: "@" >
               //| < LPAREN: "(" >
               //| < RPAREN: ")" >
               //| < LAB: "<" >
               //| < RAB: ">" >
               //| < LCB: "{" >
               //| < RCB: "}" >
               //| < LBRACE: "[" >
               //| < RBRACE: "]" >
               | < SINGLELASH:"/" >
               | < DOUBLESLASH:"//" >
       }
TOKEN : { < FILENAME: (["a"-"z"] | ["A" - "Z"] | ["0"-"9"] | "_" )+".xml" > }
TOKEN : { < STRING:  "\"" (~[ "\"", "\\" ,"\n" , "\r"])+ "\"" > }
TOKEN : { < VAR: "$"(["a"-"z"] | ["A" - "Z"])(["a"-"z"]
                | ["A" - "Z"] | ["0"-"9"])* >}
TOKEN : { < TAGNAME: (["a"-"z"] | ["A" - "Z"])+ > }
