/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. XQueryParser.jj */
/*@egen*/options {
               
                            
                 
    STATIC=false;
                       
                          
}


PARSER_BEGIN( XQueryParser)
    package XQuery;
    public class XQueryParser/*@bgen(jjtree)*/implements XQueryParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTXQueryParserState jjtree = new JJTXQueryParserState();

/*@egen*/}
PARSER_END( XQueryParser)

    AST_Root query()              : {/*@bgen(jjtree) Root */
  AST_Root jjtn000 = new AST_Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  
{/*@bgen(jjtree) Root */
    try {
/*@egen*/
    //( xQuery() ) { return jjtThis; } 
    ( absolutePath() )/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
} 

void absolutePath()             : 
{/*@bgen(jjtree) AP */
    AST_AP jjtn000 = new AST_AP(this, JJTAP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) AP */
   try {
/*@egen*/  <DOC>"(\"" filename() "\")" 
    (LOOKAHEAD(2)/*@bgen(jjtree) DoubleSlash */
                 {
                   AST_DoubleSlash jjtn001 = new AST_DoubleSlash(this, JJTDOUBLESLASH);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/<DOUBLESLASH>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/             relativePath() 
     |/*@bgen(jjtree) SingleSlash */
       {
         AST_SingleSlash jjtn002 = new AST_SingleSlash(this, JJTSINGLESLASH);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
       }
       try {
/*@egen*/ <SINGLELASH>/*@bgen(jjtree)*/
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002, true);
         }
       }
/*@egen*/             relativePath()
    )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void pathFilter()                : {/*@bgen(jjtree) PF */
  AST_PF jjtn000 = new AST_PF(this, JJTPF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PF */
   try {
/*@egen*/  LOOKAHEAD(5)(relativePath() 
        (    LOOKAHEAD(2)/*@bgen(jjtree) Eq */
                          {
                            AST_Eq jjtn001 = new AST_Eq(this, JJTEQ);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ <EQ>/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/    relativePath() pathFilter2()
             |/*@bgen(jjtree) Is */
               {
                 AST_Is jjtn002 = new AST_Is(this, JJTIS);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ <IS>/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
               }
/*@egen*/    relativePath() pathFilter2()
             |pathFilter2()
        )
        )
    | LOOKAHEAD(5)"(" pathFilter() ")" pathFilter2()
    |/*@bgen(jjtree) Not */
      {
        AST_Not jjtn003 = new AST_Not(this, JJTNOT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <NOT>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/     pathFilter() pathFilter2()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void pathFilter2()          : {}
{/*@bgen(jjtree) And */
   {
     AST_And jjtn001 = new AST_And(this, JJTAND);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/  <AND>/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/     pathFilter()pathFilter2()
    |/*@bgen(jjtree) Or */
      {
        AST_Or jjtn002 = new AST_Or(this, JJTOR);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <OR>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/    pathFilter()pathFilter2()
        | {}
}


void relativePath()             : 
{/*@bgen(jjtree) RP */
    AST_RP jjtn000 = new AST_RP(this, JJTRP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}    
{/*@bgen(jjtree) RP */
   try {
/*@egen*/  tagname() relativePath2()
    |/*@bgen(jjtree) Star */
      {
        AST_Star jjtn001 = new AST_Star(this, JJTSTAR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ <STAR>/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/      relativePath2()
        | LOOKAHEAD(2)/*@bgen(jjtree) Dot */
                       {
                         AST_Dot jjtn002 = new AST_Dot(this, JJTDOT);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ <DOT>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
                       }
/*@egen*/     relativePath2()
        |/*@bgen(jjtree) DDot */
          {
            AST_DDot jjtn003 = new AST_DDot(this, JJTDDOT);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ <DOUBLEDOT>/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/      relativePath2()
        |/*@bgen(jjtree) Txt */
          {
            AST_Txt jjtn004 = new AST_Txt(this, JJTTXT);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
          }
          try {
/*@egen*/ <TXT>/*@bgen(jjtree)*/
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
            }
          }
/*@egen*/     relativePath2()
        |  "(" relativePath() ")" relativePath2()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void relativePath2()      : {}
{ LOOKAHEAD(2) (/*@bgen(jjtree) SingleSlash */
        {
          AST_SingleSlash jjtn001 = new AST_SingleSlash(this, JJTSINGLESLASH);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        <SINGLELASH>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/             relativePath() relativePath2()
        |/*@bgen(jjtree) DoubleSlash */
          {
            AST_DoubleSlash jjtn002 = new AST_DoubleSlash(this, JJTDOUBLESLASH);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <DOUBLESLASH>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/             relativePath() relativePath2()
        )
    | "[" pathFilter() "]" relativePath2()
    | LOOKAHEAD(3)/*@bgen(jjtree) Comma */
                   {
                     AST_Comma jjtn003 = new AST_Comma(this, JJTCOMMA);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*/ ","/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                     }
                   }
/*@egen*/       relativePath() 
    | {}
}

void xQuery()               :   
{/*@bgen(jjtree) XQ */
    AST_XQ jjtn000 = new AST_XQ(this, JJTXQ);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) XQ */
    try {
/*@egen*/   
    //TODO:how to ensure that the tags match?!
    absolutePath() xQuery2()
        | "(" xQuery() ")" xQuery2()
        | "<" tagname() ">" "{"   xQuery()  "}" "</" tagname() ">" xQuery2()
        | forClause() letClauseWithEmpty() whereClause() returnClause() xQuery2()
        | letClause() xQuery()
        | var() xQuery2()
        | string() xQuery2()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void xQuery2()              :   {}
{   LOOKAHEAD(2)  ( <SINGLELASH> relativePath() | <DOUBLESLASH> relativePath() ) xQuery2()
    | LOOKAHEAD((","<VAR><ASSIGN>) | (","<VAR><IN>)) {}
    | "," xQuery() xQuery2()
        | {}
}

void forClause()                :   {/*@bgen(jjtree) FORCLAUSE */
  AST_FORCLAUSE jjtn000 = new AST_FORCLAUSE(this, JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FORCLAUSE */
    try {
/*@egen*/   <FOR> var() <IN> xQuery() ( "," var() <IN> xQuery() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void letClause()                    :   {/*@bgen(jjtree) #LETCLAUSE(> 1) */
  AST_LETCLAUSE jjtn000 = new AST_LETCLAUSE(this, JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #LETCLAUSE(> 1) */
    try {
/*@egen*/   <LET>  var() <ASSIGN> xQuery() ( "," var() <ASSIGN> xQuery() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void letClauseWithEmpty()              :   {}
{ letClause() | {}
}

void whereClause()                      :   {/*@bgen(jjtree) #WHERECLAUSE(> 1) */
  AST_WHERECLAUSE jjtn000 = new AST_WHERECLAUSE(this, JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #WHERECLAUSE(> 1) */
    try {
/*@egen*/   <WHERE> cond() 
    |/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtc000 = false;
      }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void returnClause()                     :   {/*@bgen(jjtree) #RETURNCLAUSE(> 1) */
  AST_RETURNCLAUSE jjtn000 = new AST_RETURNCLAUSE(this, JJTRETURNCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #RETURNCLAUSE(> 1) */
    try {
/*@egen*/   <RETURN> xQuery()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void cond()                     :   {/*@bgen(jjtree) COND */
  AST_COND jjtn000 = new AST_COND(this, JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COND */
  try {
/*@egen*/ <EMPTY>"(" xQuery() ")" cond2()
    | ( <SOME> var() <IN> xQuery() 
            ( "," var() <IN> xQuery() )* <SATISFIES> cond() cond2()
      )
        |
        ( xQuery() 
          ( LOOKAHEAD(2)/*@bgen(jjtree) Is */
                         {
                           AST_Is jjtn001 = new AST_Is(this, JJTIS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ <IS>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
                         }
/*@egen*/    xQuery() cond2() 
            |/*@bgen(jjtree) Eq */
              {
                AST_Eq jjtn002 = new AST_Eq(this, JJTEQ);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ <EQ>/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/    xQuery() cond2() 
          )
        )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void cond2()            :   {}
{   <AND> cond() cond2()
    | <OR> cond() cond2()
        |{}
}

void filename()                 :   
{/*@bgen(jjtree) FILENAME */
 AST_FILENAME jjtn000 = new AST_FILENAME(this, JJTFILENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FILENAME */
    try {
/*@egen*/
    t=<FILENAME>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setToken(t.kind,t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void var()          : 
{/*@bgen(jjtree) VAR */
 AST_VAR jjtn000 = new AST_VAR(this, JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VAR */
    try {
/*@egen*/
    t=<VAR>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/{jjtn000.setToken(t.kind,t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String string()               :
{/*@bgen(jjtree) STRING */
 AST_STRING jjtn000 = new AST_STRING(this, JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) STRING */
    try {
/*@egen*/
    t=<STRING>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.setToken(t.kind,t.image);return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token tagname()              :
{/*@bgen(jjtree) TAGNAME */
 AST_TAGNAME jjtn000 = new AST_TAGNAME(this, JJTTAGNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) TAGNAME */
    try {
/*@egen*/
    t=<TAGNAME>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setToken(t.kind,t.image);return t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SKIP  : { " " | "\t" | "\n" | "\r" }


/* Reserved words */
TOKEN [IGNORE_CASE]: {
    < LET: "let">
        | < DOC: "doc"|"document" >
        | < TXT: "text()" >
        | < IN: "in" >
        | < FOR: "for" >
        | < WHERE: "where" >
        | < RETURN: "return" >
        | < EQ: "eq"|"=" >
        | < IS: "is"|"==" >
        | < EMPTY: "empty" >
        | < SOME: "some" >
        | < SATISFIES: "satisfies" >
        | < AND: "and" >
        | < OR: "or" >
        | < NOT: "not" >
}

/* symbols */
TOKEN: {
           //< SINGLEEQ: "=" >
           //| < DOUBLEEQ: "==" >
           < ASSIGN: ":=" >
               |< STAR: "*" >
               //| < COMMA:"," >
               | < DOT: "." >
               | < DOUBLEDOT: ".." >
               //| < SEMI:";" >
               //| < AT: "@" >
               //| < LPAREN: "(" >
               //| < RPAREN: ")" >
               //| < LAB: "<" >
               //| < RAB: ">" >
               //| < LCB: "{" >
               //| < RCB: "}" >
               //| < LBRACE: "[" >
               //| < RBRACE: "]" >
               | < SINGLELASH:"/" >
               | < DOUBLESLASH:"//" >
       }
TOKEN : { < FILENAME: (["a"-"z"] | ["A" - "Z"] | ["0"-"9"] | "_" )+".xml" > }
TOKEN : { < STRING:  "\"" (~[ "\"", "\\" ,"\n" , "\r"])+ "\"" > }
TOKEN : { < VAR: "$"(["a"-"z"] | ["A" - "Z"])(["a"-"z"]
                | ["A" - "Z"] | ["0"-"9"])* >}
TOKEN : { < TAGNAME: (["a"-"z"] | ["A" - "Z"])+ > }
