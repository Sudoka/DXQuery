package XQuery;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import org.w3c.dom.Node;

public class XContext {

	public DebugLogger log = new DebugLogger("XContext");

	private HashMap<String, VariableKeeper> context = null;

	public XContext() {
		context = new HashMap<String, VariableKeeper>();
	}

	public XContext clone() {
		XContext newContext = new XContext();
		newContext.context = new HashMap<String, VariableKeeper>();
		for (String varName : this.context.keySet()) {
			String newName = new String(varName);
			newContext.context.put(newName, this.context.get(varName).clone());
		}
		return newContext;
	}

	public VariableKeeper Zip() {
		ArrayList<Node> nodeList = new ArrayList<Node>();
		ArrayList<ArrayList<VarNode>> nodeTuple = new ArrayList<ArrayList<VarNode>>();
		VariableKeeper result = new VariableKeeper();
		for (VariableKeeper vk : context.values()) {
			for (Node n : vk.GetNodes()) {
				nodeList.add(n);
				nodeTuple.add(vk.GetLinkData(n));
			}
		}
		for (int i = 0; i < nodeList.size(); i++) {
			result.AddNodeWithLink(nodeList.get(i), nodeTuple.get(i));
		}
		return result;
	}

	public void Remove(String varName) {
		context.remove(varName);
	}

	public void Extend(String var, VariableKeeper value) {
		value.SetName(var);
		context.put(var, value);
	}

	public VariableKeeper Lookup(String var) {
		// here we assume that, there is not variable in the context binds to
		// null
		return context.get(var);
	}

	public Set<String> GetVarNames() {
		return context.keySet();
	}

	public void RemoveVarNodeAndLinkData(VarNode node) {
		RecursiveRemove(node);
	}

	public void RecursiveRemoveVariableKeeper(VariableKeeper vk) {
<<<<<<< Updated upstream
		for (ArrayList<VarNode> nodeList : vk.GetWholeLinkData()) {
			for (VarNode varNode : nodeList) {
				RecursiveRemove(varNode);
||||||| merged common ancestors

		// traverse vk and establish removeStatus hashmap
		for (Node node : vk.GetNodes()) {
			// if the node directly appears in the vk, it should be deleted no
			// matter how many children it has
			ArrayList<VarNode> LinkedData = vk.GetLinkData(node);
			VarNode lastNode = LinkedData.get(LinkedData.size()-1);
			String varName = lastNode.name;
			// log.ErrorLog("node:" + node.getNodeName() + "\n"
			// + node.getNodeValue() + "\n" + "VarNode:" + lastNode.name
			// + " " + lastNode.node.getNodeName() + "\n"
			// + lastNode.node.getNodeValue());
			assert (lastNode.node == node);
			if (context.containsKey(varName)) {
				context.remove(varName);
				Node parent = node.getParentNode();
				removeStatusIndicator.put(parent, 1);
			} else {
				AddIndicator(node);
=======

//		for (Node node : vk.GetNodes()) {
//			// if the node directly appears in the vk, it should be deleted no
//			// matter how many children it has
//			ArrayList<VarNode> LinkedData = vk.GetLinkData(node);
//			VarNode lastNode = LinkedData.get(LinkedData.size());
//			String varName = lastNode.name;
//			log.ErrorLog("node:"+node.getNodeName()+"\n"+node.getNodeValue()+"\n"+"VarNode:"+lastNode.name+" "+lastNode.node)
//			assert (lastNode.node == node);
//			if (context.containsKey(varName)) {
//				context.remove(varName);
//			} else {
//				removeStatusIndicator.put(node, node.getChildNodes()
//						.getLength());
//				// increase the remove indicator of its parent by 1
//				Node parent = node.getParentNode();
//				if (!removeStatusIndicator.containsKey(parent)) {
//					removeStatusIndicator.put(parent, 1);
//				} else {
//					Integer indicator = removeStatusIndicator.get(parent);
//					removeStatusIndicator.put(parent, ++indicator);
//				}
//			}
//		}

		for (ArrayList<VarNode> nodeList : vk.GetWholeLinkData()) {
			for (VarNode varNode : nodeList) {
				RecursiveRemove(varNode);
>>>>>>> Stashed changes
			}
		}
<<<<<<< Updated upstream
	}
||||||| merged common ancestors
=======
	}

	private void RecursiveRemove(VarNode node) {
>>>>>>> Stashed changes

<<<<<<< Updated upstream
	private void RecursiveRemove(VarNode node) {
		if (node.name == null || context.get(node.name) == null) {
			//log.DebugLog("Damn no node name!!");
			return;
		} else {
			ArrayList<VarNode> linkNodes = context.get(node.name).GetLinkData(
					node.node);
			if (linkNodes != null) {
				ArrayList<VarNode> cloneList = new ArrayList<VarNode>();
				for (VarNode varNode : linkNodes) {
					cloneList.add(varNode.clone());
				}
				context.get(node.name).RemoveNode(node.node);
				for (VarNode varNode : cloneList) {
					RecursiveRemove(varNode);
||||||| merged common ancestors
		// traverse and remove nodes
		for (String varName : context.keySet()) {
			// for each variable binding
			VariableKeeper VK = context.get(varName);
			for (Node node : VK.GetNodes()) {
				// for each node binded to a variable
				Integer indicator = removeStatusIndicator.get(node);
				if (indicator != null && indicator > 0) {
					if (indicator >= node.getChildNodes().getLength()) {
						VK.RemoveNode(node);
						AddIndicator(node.getParentNode());
					}
=======
		if (node.name == null || context.get(node.name) == null) {
			// log.DebugLog("Damn no node name!!");
			return;
		} else {
			ArrayList<VarNode> linkNodes = context.get(node.name).GetLinkData(
					node.node);
			if (linkNodes != null) {
				ArrayList<VarNode> cloneList = new ArrayList<VarNode>();
				for (VarNode varNode : linkNodes) {
					cloneList.add(varNode.clone());
				}
				context.get(node.name).RemoveNode(node.node);
				for (VarNode varNode : cloneList) {
					RecursiveRemove(varNode);
>>>>>>> Stashed changes
				}
			}
		}

	}

	public void DebugPrintAllBingdings() {
		log.DebugLog(" Debugging infromation from XContext!!!\n"
				+ "--------------------------------------------");
		for (String varName : GetVarNames()) {
			System.out.println("Var Name:"
					+ varName
					+ "; bind to:<"
					+ Lookup(varName).size()
					+ "> "
					+ Lookup(varName).GetVarNodeList().get(0).node
							.getNodeName()
					+ "; with link length:"
					+ Lookup(varName).GetLinkData(
							Lookup(varName).GetVarNodeList().get(0).node)
							.size());
		}
	}

}
